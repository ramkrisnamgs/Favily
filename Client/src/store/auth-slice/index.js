import { createSlice, createAsyncThunk } from "@reduxjs/toolkit";
import axios from "axios";
import { ThermometerSnowflakeIcon } from "lucide-react";

const initialState = {
    isAuthenticated: false,
    isLoading: true,
    user: null,
    token: null
};

// 
export const registerUser = createAsyncThunk("auth/register", async (formData) => {
        const response = await axios.post(
            `${import.meta.env.VITE_API_URL}/api/auth/register`,
            formData,
            {
                withCredentials: true,
            }
        );

        return response.data;
    }
);

export const loginUser = createAsyncThunk('auth/login', async (formData) => {
        const response = await axios.post(
            `${import.meta.env.VITE_API_URL}/api/auth/login`,
            {
                emailOrUsername: formData.emailOrUsername,
                password: formData.password
            },
            { withCredentials: true }
        );
        return response.data;
    }
);

export const logoutUser = createAsyncThunk("auth/logout", async () => {
      const response = await axios.post(
        `${import.meta.env.VITE_API_URL}/api/auth/logout`,
        {},  // why is this empty? => because we don't need to send any data to the server
        {
          withCredentials: true,
        }
      );
  
      return response.data;
    }
);

// export const checkAuth = createAsyncThunk("auth/checkauth", async () => {
//       const response = await axios.get(
//         `${import.meta.env.VITE_API_URL}/api/auth/check-auth`,
//         {
//           withCredentials: true,
//           headers: {
//             "Cache-Control":
//               "no-store, no-cache, must-revalidate, proxy-revalidate",
//           },
//         }
//       );
  
//       return response.data;
//     }
//   );

export const checkAuth = createAsyncThunk("auth/checkauth", async (token) => {
  const response = await axios.get(
    `${import.meta.env.VITE_API_URL}/api/auth/check-auth`,
    {
      headers: {
        Authorization: `Bearer ${token}`, // this is how we send the token to the server. what is Bearer? => Bearer is a type of token that is used to authenticate API requests. The Bearer token is a cryptic string, usually generated by the server in response to a login request. The client must send this token in the Authorization header when making requests to protected resources.
        "Cache-Control":
          "no-store, no-cache, must-revalidate, proxy-revalidate",
      },
    }
  );

  return response.data;
}
);

const authSlice = createSlice({
    name: 'auth',
    initialState,
    reducers: {
        setUser: (state, action) => { },
        resetTokenAndCredentials: (state) => {
          state.isAuthenticated = false;
          state.user = null;
          state.token = null;
        }
    },
    extraReducers: (builder) => {
        builder
            .addCase(registerUser.pending, (state) => {
                state.isLoading = true;
            })
            .addCase(registerUser.fulfilled, (state, action) => {
                state.isLoading = false;
                state.user = null;
                state.isAuthenticated = false;
            })
            .addCase(registerUser.rejected, (state, action) => {
                state.isLoading = false;
                state.user = null;
                state.isAuthenticated = false;
            })
            .addCase(loginUser.pending, (state) => {
                state.isLoading = true;
            })
            .addCase(loginUser.fulfilled, (state, action) => {
                state.isLoading = false;
                state.user = action.payload.success ? action.payload.user : null;
                state.isAuthenticated = action.payload.success;
            })
            .addCase(loginUser.rejected, (state) => {
                state.isLoading = false;
                state.user = null;
                state.isAuthenticated = false;
            })
            .addCase(checkAuth.pending, (state) => {
              state.isLoading = true;
            })
            .addCase(checkAuth.fulfilled, (state, action) => {
              state.isLoading = false;
              state.user = action.payload.success ? action.payload.user : null;
              state.isAuthenticated = action.payload.success;
              state.token = action.payload.token;
              sessionStorage.setItem("token", action.payload.token);
            })
            .addCase(checkAuth.rejected, (state, action) => {
              state.isLoading = false;
              state.user = null;
              state.isAuthenticated = false;
              state.token = null;
            })
            .addCase(logoutUser.fulfilled, (state, action) => {
              state.isLoading = false;
              state.user = null;
              state.isAuthenticated = false;
            });
    }
});

export const { setUser, resetTokenAndCredentials } = authSlice.actions;
export default authSlice.reducer;